package practiki.prac_8;
//СДАНО

/*
Вначале, рассмотрите класс, представленный на диаграмме - общий класс список ожидания. Допустим мы решили, что нам понадобиться еще два вида списков ожидания:
• BoundedWaitList: Этот список ожидания имеет ограниченную емкость, указываемую в момент создания. Он не принимает более элементов, чем заранее задано (возможное количество потенциальных элементов в списке ожидания).
• UnfairWaitList: В этом списке ожидания, можно удалить элемент, который не является первым в очереди - и помните он не может вернуться обратно! (Возможны различные реализации, но в вашей реализации необходимо удалить первое вхождение данного элемента.) Также возможно, чтобы  например, первый элемент будет отправлен обратно в конец списка.
После описания всей задачи в целом, мы сможем решить, что мы нам нужен интерфейс IWaitList, и затем нужно создать три разных класса для трех списков ожидания. Также предполагается, что один из списков ожидания должен быть супер классом для двух других списков ожидания.
Задание
1.	Исследуйте UML диаграмму классов на рисунке 1 и понаблюдайте, как она выражает то, что мы говорили выше в словах. Убедитесь, что вы понимаете все аспекты диаграммы.
2.	Расширить и модифицировать исходный код WaitList, как необходимо, чтобы полностью реализовать всю схему UML. Включить комментарии Javadoc. Обратите внимание на переключение ролей после реализации каждого интерфейса / класса!
3.	Изучение работу метода main(), которая использует ваши новые классы и интерфейс.

 */
public class Main {
    public static void main(String[] args) {
        WaitList<Integer> lst1 = new BoundedWaitList<Integer>(2);
        lst1.add(1);
        lst1.add(2);
        lst1.add(3);
        System.out.println(lst1);
        lst1.remove();
        lst1.add(3);
        System.out.println(lst1);

        System.out.println("-----------------");
        UnfairWaitList<Integer> lst = new UnfairWaitList<Integer>();
        lst.add(123);
        lst.add(2);
        System.out.println(lst);
        lst.remove();
        System.out.println(lst);
        lst.add(32);
        lst.add(123);
        System.out.println(lst);
        lst.moveToBack(32);
        System.out.println(lst);
    }
}
